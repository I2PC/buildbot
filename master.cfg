# ex: set syntax=python:

# Scipion master config file.

import os

# Buildbot configuration dictionary (and alias)
c = BuildmasterConfig = {}

##############################################################################
#               BUILDSLAVES
# -----------------------------------------------------------------------------
# The Scipion 'slaves' list. Slaves were also configured with that
# password when created.
# if you change something, check all the occurrences along this file
##############################################################################
from buildbot.worker import Worker
from settings import WORKER, WORKER_PASS, PORT

# nolan should be able to handle all tests, big or small
c['workers'] = [Worker(WORKER, WORKER_PASS)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This match the value configured into the buildslaves (using --master option)
c['protocols'] = {"pb": {"port": PORT}}

from buildbot.steps.shell import ShellCommand

# *****************************************************************************
# *****************************************************************************
#                               BUILD FACTORIES
# *****************************************************************************
# *****************************************************************************

# *****************************************************************************
#                            BUILD GROUP FACTORY
# *****************************************************************************
# This one orchestrates everything: installs scipion, xmipp, plugins and performs
# their tests.
from buildbot.plugins import util, steps

from settings import (SCIPION_BUILD_ID, CLEANUP_PREFIX, SCIPION_INSTALL_PREFIX, SCIPION_TESTS_PREFIX,
                      XMIPP_INSTALL_PREFIX, XMIPP_BUNDLE_TESTS, XMIPP_TESTS, DEVEL_GROUP_ID, PROD_GROUP_ID)
from master_scipion import scipionPlugins, locscalePluginData, xmippPluginData

def isSaturday(step):
    from datetime import datetime
    return datetime.today().weekday() == 5

def isSunday(step):
    from datetime import datetime
    return datetime.today().weekday() == 6

def commonBuildGroupFactorySteps(groupId, factorySteps=None):
    factorySteps = factorySteps or util.BuildFactory()
    factorySteps.addStep(steps.SetPropertyFromCommand(command="echo $PWD",
                                                      property="SCIPION_HOME",
                                                      name="Set SCIPION_HOME",
                                                      description="Set SCIPION_HOME",
                                                      descriptionDone="SCIPION_HOME set"))

    factorySteps.addStep(steps.SetProperty(property='SCIPION_LOCAL_CONFIG',
                                           value="~/.config/scipion/scipion_%s.conf" % groupId,
                                           name="Set SCIPION_LOCAL_CONFIG",
                                           description="Set SCIPION_LOCAL_CONFIG",
                                           descriptionDone="SCIPION_LOCAL_CONFIG set"))

    factorySteps.addStep(steps.SetPropertyFromCommand(command='echo $(dirname "$(pwd)")',
                                                      property="BUILD_GROUP_HOME",
                                                      name="Set BUILD_GROUP_HOME",
                                                      description="Set BUILD_GROUP_HOME",
                                                      descriptionDone="BUILD_GROUP_HOME set"
                                                      ))

    factorySteps.addStep(steps.Trigger(schedulerNames=[CLEANUP_PREFIX + groupId],
                                       doStepIf=isSaturday,
                                       waitForFinish=True,
                                       set_properties={
                                           'SCIPION_HOME': util.Property('SCIPION_HOME'),
                                           'BUILD_GROUP_HOME': util.Property('BUILD_GROUP_HOME'),
                                           "SCIPION_LOCAL_CONFIG": util.Property("SCIPION_LOCAL_CONFIG")}))

    factorySteps.addStep(
        steps.Trigger(schedulerNames=[SCIPION_INSTALL_PREFIX + groupId],
                      waitForFinish=True,
                      haltOnFailure=True,
                      set_properties={
                          'BUILD_GROUP_HOME': util.Property('BUILD_GROUP_HOME'),
                          "SCIPION_LOCAL_CONFIG": util.Property("SCIPION_LOCAL_CONFIG")}
                      ))

    factorySteps.addStep(ShellCommand(command=['echo', 'SCIPION_HOME: ',
                                               util.Property('SCIPION_HOME')],
                                      name='Echo scipion home',
                                      description='Echo scipion home',
                                      descriptionDone='Echo scipion home',
                                      timeout=300
                                      ))

    return factorySteps


def develBuildGroupFactory():
    groupId = DEVEL_GROUP_ID
    factorySteps = commonBuildGroupFactorySteps(groupId)
    factorySteps.workdir = SCIPION_BUILD_ID
    props = {
        'SCIPION_HOME': util.Property("SCIPION_HOME"),
        "SCIPION_LOCAL_CONFIG": util.Property("SCIPION_LOCAL_CONFIG")}

    plugins = {}
    plugins.update(scipionPlugins)
    plugins.update({'scipion-em-locscale': locscalePluginData})

    # these stepSchedulerNames will be triggered IN ORDER.
    stepSchedulerNames = [XMIPP_INSTALL_PREFIX + groupId, XMIPP_BUNDLE_TESTS + groupId]
    stepSchedulerNames += [p.rsplit('-')[-1] for p in plugins]
    stepSchedulerNames += [SCIPION_TESTS_PREFIX + groupId, XMIPP_TESTS + groupId]

    for schedulerName in stepSchedulerNames:
        factorySteps.addStep(
            steps.Trigger(schedulerNames=[schedulerName],
                          waitForFinish=True,
                          set_properties=props))

    return factorySteps

def prodBuildGroupFactory():
    groupId = PROD_GROUP_ID
    factorySteps = commonBuildGroupFactorySteps(groupId)
    factorySteps.workdir = SCIPION_BUILD_ID

    plugins = {}
    plugins.update(scipionPlugins)
    plugins.update({'scipion-em-locscale': locscalePluginData})
    plugins.update({'scipion-em-xmipp': xmippPluginData})

    for plugin in scipionPlugins:
        module = plugin.rsplit('-')[-1]
        factorySteps.addStep(steps.Trigger(schedulerNames=["%s_%s" % (module, groupId)],
                                           waitForFinish=True,
                                           set_properties={
                                               'SCIPION_HOME': util.Property('SCIPION_HOME')}))

    factorySteps.addStep(steps.Trigger(schedulerNames=[SCIPION_TESTS_PREFIX + groupId],
                                       waitForFinish=True,
                                       set_properties={
                                           'SCIPION_HOME': util.Property('SCIPION_HOME')}))

    # factorySteps.addStep(steps.Trigger(schedulerNames=[XMIPP_TESTS + groupId],
    #                                    waitForFinish=True,
    #                                    set_properties={
    #                                        "SCIPION_HOME": util.Property("SCIPION_HOME")}))


    return factorySteps


##############################################################################
# ****************************************************************************
#                               BUILDERS
# ****************************************************************************
##############################################################################
from buildbot.config import BuilderConfig
from settings import branchsDict
from master_scipion import getScipionBuilders
from master_xmipp import getXmippBuilders

# Create the builders.
c['builders'] = []
c['builders'].append(
    BuilderConfig(name=DEVEL_GROUP_ID,
                  workernames=['einstein'],
                  tags=[DEVEL_GROUP_ID],
                  factory=develBuildGroupFactory(),
                  workerbuilddir=DEVEL_GROUP_ID,
                  env={"SCIPION_IGNORE_PYTHONPATH": "True"}))
c['builders'].append(
    BuilderConfig(name=PROD_GROUP_ID,
                  workernames=['einstein'],
                  tags=[PROD_GROUP_ID],
                  factory=prodBuildGroupFactory(),
                  workerbuilddir=PROD_GROUP_ID,
                  env={"SCIPION_IGNORE_PYTHONPATH": "True"}))

for groupId in branchsDict:
    c['builders'] += getScipionBuilders(groupId)
    c['builders'] += getXmippBuilders(groupId)

##############################################################################
#               SCHEDULERS
# -----------------------------------------------------------------------------
# Schedulers decide how to react to incoming changes.
##############################################################################
from buildbot.schedulers import timed, triggerable
from buildbot.schedulers.forcesched import ForceScheduler
from settings import FORCE_BUILDER_PREFIX

c['schedulers'] = []

# *****************************************************************************
# Periodic 
# http://docs.buildbot.net/latest/manual/cfg-schedulers.html#sched-Periodic
# *****************************************************************************
from master_scipion import getScipionSchedulers
from master_xmipp import getXmippSchedulers

weekDays = {0: 'Mon.', 1: 'Tue.', 2: 'Wed.', 3: 'Thu.', 4: 'Fri.', 5: 'Sat.', 6: 'Sun.'}
triggerableSchedulers = []  # ['Specific_Branch_Tests']

# Devel builds every 36 hours
c['schedulers'].append(timed.Periodic(
    name=DEVEL_GROUP_ID,
    builderNames=[DEVEL_GROUP_ID],
    periodicBuildTimer=36 * 60 * 60))

# Prod builds every sunday
c['schedulers'].append(timed.Nightly(
    name=PROD_GROUP_ID,
    builderNames=[PROD_GROUP_ID],
    dayOfWeek=6,
    hour=0,
    minute=30))

for index, (groupId, groupBranches) in enumerate(branchsDict.iteritems()):
#     # Assign every branch to some week days to have alternate schedulers.
#     #   For two branches (i.e. master and devel) we have:
#     #    - Monday, Wendesday, Friday and Sunday for master
#     #    - Tuesday, Thursday and Saturday for devel
#     days = [day + index for day in range(7 - index) if day % len(branchsDict) == 0]
#     print(' > > > branch %s will be test on %s < < <'
#           % (groupBranches[SCIPION_BUILD_ID], ', '.join([weekDays[day] for day in days])))

    # c['schedulers'].append(timed.Nightly(
    #     name=groupId,
    #     builderNames=[groupId],
    #     dayOfWeek=days,
    #     hour=0, minute=30))

    # c['schedulers'].append(triggerable.Triggerable(
    #     name=groupId,
    #     builderNames=[groupId]))

    c['schedulers'].append(ForceScheduler(
        name=FORCE_BUILDER_PREFIX + groupId,
        builderNames=[groupId]))

    c['schedulers'] += getScipionSchedulers(groupId)
    c['schedulers'] += getXmippSchedulers(groupId)


##############################################################################
#               WEB ACCESS  
##############################################################################
from buildbot.www import auth
from buildbot.plugins import util
from settings import WEB_PORT, WEB_URL

c['www'] = dict(port=WEB_PORT,
                plugins=dict(waterfall_view={},
                             console_view={},
                             badges={}),
                change_hook_dialects={'github': {}},
                auth=util.UserPasswordAuth({"admin": "bu1ldb0t."}))

##############################################################################
#           PROJECT IDENTITY
##############################################################################
# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = 'Scipion Automatic Tests'
c['titleURL'] = 'http://scipion.cnb.csic.es/docs/bin/view/TWiki/RunningTests/'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

# c['buildbotURL'] = 'http://localhost:9980/'
c['buildbotURL'] = WEB_URL


##############################################################################
#               DB URL
##############################################################################
# This specifies what database buildbot uses to store its state. You can leave
# this at its default for all but the largest installations.
c['db'] = {
    'db_url': 'sqlite:///state.sqlite',
}

##############################################################################
#               MAIL NOTIFICATIONS
##############################################################################

c['services'] = []


def bbot2Slack(build):
    from buildbot.process.results import FAILURE
    result = build['results']

    if result == FAILURE and result is not None:
        builderid = build['builderid']
        builderName = build['properties']['buildername'][0]
        if builderName in branchsDict:  # master builder doesnt report
            return

        channel = build['properties']['slackChannel'][0]
        if channel == "":
            return
        msgJson = dict()
        msgStr = ("<%s|%s - %s> is failing.\nShame on you! :rage:, please fix it ASAP."
                  % (build['url'], builderName, build['number']))
        failsStr = ' (failure)\n\t - '.join(build['state_string'].split(' (failure) '))
        msgStr += "\nStatus is: " + 'Failed\n\t - ' + failsStr.strip('failed ')
        msgJson["text"] = msgStr
        msgJson["channel"] = "#%s" % channel

        return msgJson


from buildbot.plugins import reporters

sp = reporters.HttpStatusPush(
    serverUrl="https://hooks.slack.com/services/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",
    format_fn=bbot2Slack,
    wantProperties=True)

if os.environ.get('DONT_NOTIFY_SLACK', None) is None:
    c['services'].append(sp)

mn = reporters.MailNotifier(fromaddr='biocompwebs@gmail.com',
                            subject="buildbot %(result)s in %(projectName)s on %(builder)s",
                            mode='failing',
                            sendToInterestedUsers=True,
                            builders=['Pull_Request_Tests'],
                            relayhost='localhost',
                            smtpPort=25)
c['services'].append(mn)

"""
c['services'] = []
mn = reporters.MailNotifier(fromaddr='biocompwebs@gmail.com', 
    subject="buildbot %(result)s in %(projectName)s on %(builder)s", 
    mode='failing', 
    extraRecipients=['scipion-devel@cnb.csic.es'],
    sendToInterestedUsers=False,
    relayhost='localhost', 
    smtpPort=25)
c['services'].append(mn)
"""


c['changeHorizon'] = 50
c['buildHorizon'] = 10
c['logHorizon'] = 5
c['buildCacheSize'] = 15
